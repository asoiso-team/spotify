window.Social = {

  facebook: {
    init: function(FacebookAppId) {
      // store it on the object
      this.FacebookAppId = FacebookAppId;

      function loadScript(url, callback) {
        // Adding the script tag to the head as suggested before
        var head = document.getElementsByTagName('head')[0];
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;

        // Then bind the event to the callback function.
        // There are several events for cross browser compatibility.
        if(!window.navigator.userAgent.indexOf("MSIE "))
          script.onreadystatechange = callback;

        script.onload = callback;

        // Fire the loading
        head.appendChild(script);
      }

      loadScript('https://connect.facebook.net/en_US/sdk.js', function(){

        FB.init({
          appId: globals.social.facebook.appId,
          status: false, // check login status
          cookie: false, // enable cookies to allow the server to access the session
          xfbml: false, // parse XFBML
          version: 'v2.0'
        });

        function onUrl(data) {
          console.log(data);
        };

        FB.Canvas.setUrlHandler(onUrl);

      });
    },

    connect: function(callback) {
      callback || (callback = function() {
        console.log(arguments)
      });

      if (!navigator.userAgent.match('CriOS')) {
        // if( false ){
        FB.login(function(response) {
          if (response.authResponse) {
            var access_token = FB.getAuthResponse()['accessToken'];
            console.log('FB.login access_token: ' + access_token);
            FB.api('/me', function(response) {

              //contruct response obj
              callback(response);
            });
          } else {
            console.log(
              'FB.login: user cancelled login or did not fully authorize.');
          }
        }, {
          scope: 'email'
        });
      } else {
        localStorage.removeItem("fb_access_token");
        // Fallback for chrome for iOS (which hasn't window.opener for facebook JS SDK)
        // open the facebook login URL generated by PHP. Calling back on ./facebook/tokenCallback.php which save the access token to the localstorage and close itself.
        window.open(window.fbLoginUrl, 'intent');

        // check if localstorage has been updated with the access token. Then get the user information and clear the localstorage.
        var loginInterval = setInterval(function() {
          var access_token = localStorage.getItem("fb_access_token");
          if (access_token !== null) {
            localStorage.removeItem("fb_access_token");
            FB.api('/me', {
              access_token: access_token
            }, function(response) {
              clearInterval(loginInterval);
              callback(response);
            });
          }
        }, 300);
      }
    },

    share: function(shareProps) {
      //ga('send', 'event', 'share', 'facebook', shareProps.link);
      FB.ui({
          method: 'feed',
          name: shareProps.name,
          caption: shareProps.caption,
          description: shareProps.description,
          link: shareProps.link,
          picture: shareProps.picture
        },
        function(response) {
          if (response && response.post_id) {
            //flashCallBack('callbackFacebookShare', "");
            console.log(response);
          }
        }
      );
    }
  },

  twitter: {
    share: function(shareProps) {
      shareProps || (shareProps = {});
      shareProps.link || (shareProps.link = '');
      shareProps.text || (shareProps.text = '');

      //ga('send', 'event', 'share', 'twitter', shareProps.link);

      var width = 550,
        height = 420,
        top = 0,
        left = 0,
        winHeight = screen.height,
        winWidth = screen.width,
        windowOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=yes';


      left = Math.round((winWidth / 2) - (width / 2));
      if (winHeight > height) {
        top = Math.round((winHeight / 2) - (height / 2));
      }

      window.open("https://twitter.com/intent/tweet?url=" +
        encodeURIComponent(shareProps.link) + "&text=" +
        encodeURIComponent(shareProps.text) + "&count=none/",
        'intent', windowOptions + ',width=' + width +
        ',height=' + height + ',left=' + left + ',top=' + top);
    }
  },

  google: {
    share: function(shareProps) {
      shareProps || (shareProps = {});
      shareProps.link || (shareProps.link = '');
      shareProps.description || (shareProps.description = '');

      var width = 550,
        height = 420,
        top = 0,
        left = 0,
        winHeight = screen.height,
        winWidth = screen.width,
        windowOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=yes';


      //ga('send', 'event', 'share', 'googlePlus', shareProps.link);


      left = Math.round((winWidth / 2) - (width / 2));
      if (winHeight > height) {
        top = Math.round((winHeight / 2) - (height / 2));
      }
      // TODO: implement regional switches
      // window.open('https://twitter.com/intent/tweet?text=hello_world&url=http://www.example.com');
      window.open("https://plus.google.com/share?url=" +
        encodeURIComponent(shareProps.link),
        'intent', windowOptions + ',width=' + width +
        ',height=' + height + ',left=' + left + ',top=' + top);

      // window.open('https://plus.google.com/share?url=http%3A%2F%2Fexample.com', "share");
    }
  }

};
